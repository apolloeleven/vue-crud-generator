<template>
  <div class="{{mainDivClass}}">

    <h1 v-if="{{objectVariableName}}.uuid">{{$t('Update')}} {{$t('{{componentNameVisual}}')}}</h1>
    <h1 v-if="!{{objectVariableName}}.uuid">{{$t('Create')}} {{$t('{{componentNameVisual}}')}}</h1>

    <error-placeholder
            @onDismissed="formErrors = []"
            :form-errors="formErrors"></error-placeholder>

    <b-form @submit.prevent="onSubmit">
      {{inputFields}}{{translatableInputFields}}

      <b-button type="submit"
                variant="primary"
                :disabled="this.$v.$invalid"
                class="mr-1">
        {{$t('Submit')}}
      </b-button>

      <b-button type="reset"
                to="/{{mainUrl}}"
                variant="danger">
        {{$t('Cancel')}}
      </b-button>

    </b-form>

  </div>
</template>

<script>

  import {{serviceName}} from './{{serviceName}}';
  import i18nHelper from './../../core/services/i18n.service';
  import Helper from './../../core/services/helper.service';
  import MultiInput from "../../core/components/multi-input/MultiInput";
  import {required} from "vuelidate/lib/validators";
  import ErrorPlaceholder from "../../core/components/common/ErrorPlaceholder";

  export default {
    name: "{{componentName}}Form",
    components: {ErrorPlaceholder, MultiInput},
    data: () => {
      let data = {
        formErrors: [],
        locales: i18nHelper.getAvailableLocales(),
        fields: [],
        translatableFields: {{serviceName}}.getGeneralFields().translatableFields,
        {{objectVariableName}}: {{{formDataFields}}
        }
      };

      i18nHelper.initTranslatableFields(data.{{objectVariableName}}, data.translatableFields);

      return data
    },
    validations() {
      let validators = {{{formValidatorFields}}
      };

      this.translatableFields.forEach((field) => {
        validators[field.name] = {};
        validators[field.name][i18nHelper.getMasterLanguage().key] = {
          required
        }
      });

      return {
        {{objectVariableName}}: validators,
      }
    },
    methods: {
      onSubmit() {
        this.$v.$touch();
        this.save();
      },
      onBlur() {
        this.$v.$touch();
      },
      save() {
        if (!this.$v.$invalid) {

          this.formErrors = [];

          if (this.{{objectVariableName}}.uuid) {
            {{serviceName}}.update{{componentName}}(this.{{objectVariableName}}.uuid, this.{{objectVariableName}})
              .then(response => {
                this.$router.push({path: '/{{mainUrl}}'})
              }, error => {
                Helper.handleErrors(this.formErrors, error.body);
              });
          } else {
            {{serviceName}}.create{{componentName}}(this.{{objectVariableName}})
              .then(response => {
                this.$router.push({path: '/{{mainUrl}}'})
              }, error => {
                Helper.handleErrors(this.formErrors, error.body);
              });
          }
        }
      },
    },
    beforeMount() {
      if (this.$route.params.id) {
        {{serviceName}}.get{{componentName}}(this.$route.params.id)
          .then(response => {
            this.{{objectVariableName}} = response.data;
          }, error => {
            Helper.handleErrors(this.formErrors, error.body);
          });
      }
    }
  }
</script>

<style lang="scss">
  .{{mainDivClass}} {
    form {
      background-color: #fafafa;
      padding: 15px 20px;
    }
  }
</style>
